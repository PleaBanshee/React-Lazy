{"version":3,"sources":["Components/Page1.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["Page1","onRouteChange","className","src","logo","alt","onClick","App","useState","route","routeChange","Page2","React","lazy","Page3","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yOAeeA,EAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACZ,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,kCAEF,wBAAQA,UAAU,WAAlB,mBACA,wBAAQI,QAAS,kBAAML,EAAc,UAArC,mBACA,wBAAQK,QAAS,kBAAML,EAAc,UAArC,uBCsBWM,MA7Bf,WACE,MAA4BC,mBAAS,SAArC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAQC,IAAMC,MAAK,kBAAM,gCACzBC,EAAQF,IAAMC,MAAK,kBAAM,gCAEzBZ,EAAgB,SAACQ,GACrBC,EAAYD,IAGd,MAAc,UAAVA,EACK,cAAC,EAAD,CAAOR,cAAeA,IACV,UAAVQ,EAIP,aAFA,CAEC,WAAD,CAAUM,SAAU,6CAApB,SACE,cAACJ,EAAD,CAAOV,cAAeA,MAK1B,cAAC,WAAD,CAAUc,SAAU,6CAApB,SACE,cAACD,EAAD,CAAOb,cAAeA,OClBtBe,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,cAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,cAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCzCxBkC,I,+BCPe,QAA0B,mC","file":"static/js/main.7d41ebc6.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\n// onRouteChange destructured, so you dont have to make use of props.onRouteChange \r\nconst Page1 = ({ onRouteChange }) =>\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className=\"App-title\">Welcome to Page 1</h1>\r\n    </header>\r\n    <button className='disabled'>Page1</button>\r\n    <button onClick={() => onRouteChange('page2')}>Page2</button>\r\n    <button onClick={() => onRouteChange('page3')}>Page3</button>\r\n  </div>\r\n\r\nexport default Page1;","import React, { useState, Suspense } from 'react';\r\nimport './App.css';\r\n\r\nimport Page1 from './Components/Page1';\r\n\r\nfunction App() {\r\n  const [route,routeChange] = useState('page1');\r\n  // React.lazy: lets you render a dynamic import as a regular component\r\n  const Page2 = React.lazy(() => import(\"./Components/Page2\"));\r\n  const Page3 = React.lazy(() => import(\"./Components/Page3\"))\r\n\r\n  const onRouteChange = (route) => {\r\n    routeChange(route); \r\n  }\r\n\r\n  if (route === 'page1') {\r\n    return <Page1 onRouteChange={onRouteChange} />\r\n  } else if (route === 'page2') {\r\n    return (\r\n      // Lazy component should then be rendered inside a Suspense component, which allows us to show some fallback content (such as a loading indicator)\r\n      // while weâ€™re waiting for the lazy component to load.\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Page2 onRouteChange={onRouteChange} />\r\n      </Suspense>\r\n    )\r\n  } else {\r\n    return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Page3 onRouteChange={onRouteChange} />\r\n    </Suspense>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";"],"sourceRoot":""}